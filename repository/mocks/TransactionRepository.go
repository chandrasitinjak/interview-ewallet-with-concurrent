// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/chandrasitinjak/interview-ewallet-with-concurrent/model"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// CreateTransactionTx provides a mock function with given fields: ctx, tx, tr
func (_m *TransactionRepository) CreateTransactionTx(ctx context.Context, tx *sql.Tx, tr *model.Transaction) (int64, error) {
	ret := _m.Called(ctx, tx, tr)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransactionTx")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.Transaction) (int64, error)); ok {
		return rf(ctx, tx, tr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sql.Tx, *model.Transaction) int64); ok {
		r0 = rf(ctx, tx, tr)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sql.Tx, *model.Transaction) error); ok {
		r1 = rf(ctx, tx, tr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
